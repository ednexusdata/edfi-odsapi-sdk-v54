// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v54.Client;

namespace EdFi.OdsApi.Sdk.v54.Models.All
{
    /// <summary>
    /// EdFiPayroll
    /// </summary>
    public partial class EdFiPayroll : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiPayroll" /> class.
        /// </summary>
        /// <param name="asOfDate">The date of the reported payroll element.</param>
        /// <param name="accountReference">accountReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="amountToDate">Current balance (amount paid to employee) for account for the fiscal year.</param>
        /// <param name="id">id</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the Payroll entity.</param>
        [JsonConstructor]
        public EdFiPayroll(DateOnly asOfDate, EdFiAccountReference accountReference, EdFiStaffReference staffReference, double amountToDate, Option<string?> id = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            AsOfDate = asOfDate;
            AccountReference = accountReference;
            StaffReference = staffReference;
            AmountToDate = amountToDate;
            IdOption = id;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The date of the reported payroll element.
        /// </summary>
        /// <value>The date of the reported payroll element.</value>
        [JsonPropertyName("asOfDate")]
        public DateOnly AsOfDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountReference
        /// </summary>
        [JsonPropertyName("accountReference")]
        public EdFiAccountReference AccountReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Current balance (amount paid to employee) for account for the fiscal year.
        /// </summary>
        /// <value>Current balance (amount paid to employee) for account for the fiscal year.</value>
        [JsonPropertyName("amountToDate")]
        public double AmountToDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Payroll entity.
        /// </summary>
        /// <value>Extensions to the Payroll entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiPayroll {\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  AccountReference: ").Append(AccountReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  AmountToDate: ").Append(AmountToDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiPayroll" />
    /// </summary>
    public class EdFiPayrollJsonConverter : JsonConverter<EdFiPayroll>
    {
        /// <summary>
        /// The format to use to serialize AsOfDate
        /// </summary>
        public static string AsOfDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiPayroll" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiPayroll Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> asOfDate = default;
            Option<EdFiAccountReference?> accountReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<double?> amountToDate = default;
            Option<string?> id = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "asOfDate":
                            asOfDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountReference":
                            accountReference = new Option<EdFiAccountReference?>(JsonSerializer.Deserialize<EdFiAccountReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "amountToDate":
                            amountToDate = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!asOfDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiPayroll.", nameof(asOfDate));

            if (!accountReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiPayroll.", nameof(accountReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiPayroll.", nameof(staffReference));

            if (!amountToDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiPayroll.", nameof(amountToDate));

            if (asOfDate.IsSet && asOfDate.Value == null)
                throw new ArgumentNullException(nameof(asOfDate), "Property is not nullable for class EdFiPayroll.");

            if (accountReference.IsSet && accountReference.Value == null)
                throw new ArgumentNullException(nameof(accountReference), "Property is not nullable for class EdFiPayroll.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiPayroll.");

            if (amountToDate.IsSet && amountToDate.Value == null)
                throw new ArgumentNullException(nameof(amountToDate), "Property is not nullable for class EdFiPayroll.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiPayroll.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiPayroll.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiPayroll.");

            return new EdFiPayroll(asOfDate.Value!.Value!, accountReference.Value!, staffReference.Value!, amountToDate.Value!.Value!, id, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiPayroll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiPayroll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiPayroll edFiPayroll, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiPayroll, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiPayroll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiPayroll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiPayroll edFiPayroll, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiPayroll.AccountReference == null)
                throw new ArgumentNullException(nameof(edFiPayroll.AccountReference), "Property is required for class EdFiPayroll.");

            if (edFiPayroll.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiPayroll.StaffReference), "Property is required for class EdFiPayroll.");

            if (edFiPayroll.IdOption.IsSet && edFiPayroll.Id == null)
                throw new ArgumentNullException(nameof(edFiPayroll.Id), "Property is required for class EdFiPayroll.");

            if (edFiPayroll.EtagOption.IsSet && edFiPayroll.Etag == null)
                throw new ArgumentNullException(nameof(edFiPayroll.Etag), "Property is required for class EdFiPayroll.");

            if (edFiPayroll.ExtOption.IsSet && edFiPayroll.Ext == null)
                throw new ArgumentNullException(nameof(edFiPayroll.Ext), "Property is required for class EdFiPayroll.");

            writer.WriteString("asOfDate", edFiPayroll.AsOfDate.ToString(AsOfDateFormat));

            writer.WritePropertyName("accountReference");
            JsonSerializer.Serialize(writer, edFiPayroll.AccountReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiPayroll.StaffReference, jsonSerializerOptions);
            writer.WriteNumber("amountToDate", edFiPayroll.AmountToDate);

            if (edFiPayroll.IdOption.IsSet)
                writer.WriteString("id", edFiPayroll.Id);

            if (edFiPayroll.EtagOption.IsSet)
                writer.WriteString("_etag", edFiPayroll.Etag);

            if (edFiPayroll.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiPayroll.Ext, jsonSerializerOptions);
            }
        }
    }
}
