/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v54.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v54.Models.All
{
    /// <summary>
    /// EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    /// </summary>
    [DataContract(Name = "edFi_studentAssessmentStudentObjectiveAssessmentPerformanceLevel")]
    public partial class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" /> class.
        /// </summary>
        /// <param name="assessmentReportingMethodDescriptor">The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used. (required).</param>
        /// <param name="performanceLevelDescriptor">A specification of which performance level value describes the student proficiency. (required).</param>
        /// <param name="performanceLevelMet">Indicator of whether the performance level was met. (required).</param>
        /// <param name="ext">Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity..</param>
        public EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel(string assessmentReportingMethodDescriptor = default, string performanceLevelDescriptor = default, bool performanceLevelMet = default, Object ext = default)
        {
            // to ensure "assessmentReportingMethodDescriptor" is required (not null)
            if (assessmentReportingMethodDescriptor == null)
            {
                throw new ArgumentNullException("assessmentReportingMethodDescriptor is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel and cannot be null");
            }
            this.AssessmentReportingMethodDescriptor = assessmentReportingMethodDescriptor;
            // to ensure "performanceLevelDescriptor" is required (not null)
            if (performanceLevelDescriptor == null)
            {
                throw new ArgumentNullException("performanceLevelDescriptor is a required property for EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel and cannot be null");
            }
            this.PerformanceLevelDescriptor = performanceLevelDescriptor;
            this.PerformanceLevelMet = performanceLevelMet;
            this.Ext = ext;
        }

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        /// <value>The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.</value>
        [DataMember(Name = "assessmentReportingMethodDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string AssessmentReportingMethodDescriptor { get; set; }

        /// <summary>
        /// A specification of which performance level value describes the student proficiency.
        /// </summary>
        /// <value>A specification of which performance level value describes the student proficiency.</value>
        [DataMember(Name = "performanceLevelDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether the performance level was met.
        /// </summary>
        /// <value>Indicator of whether the performance level was met.</value>
        [DataMember(Name = "performanceLevelMet", IsRequired = true, EmitDefaultValue = true)]
        public bool PerformanceLevelMet { get; set; }

        /// <summary>
        /// Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel {\n");
            sb.Append("  AssessmentReportingMethodDescriptor: ").Append(AssessmentReportingMethodDescriptor).Append("\n");
            sb.Append("  PerformanceLevelDescriptor: ").Append(PerformanceLevelDescriptor).Append("\n");
            sb.Append("  PerformanceLevelMet: ").Append(PerformanceLevelMet).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentReportingMethodDescriptor (string) maxLength
            if (this.AssessmentReportingMethodDescriptor != null && this.AssessmentReportingMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentReportingMethodDescriptor, length must be less than 306.", new [] { "AssessmentReportingMethodDescriptor" });
            }

            // PerformanceLevelDescriptor (string) maxLength
            if (this.PerformanceLevelDescriptor != null && this.PerformanceLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PerformanceLevelDescriptor, length must be less than 306.", new [] { "PerformanceLevelDescriptor" });
            }

            yield break;
        }
    }

}
