// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v54.Client;

namespace EdFi.OdsApi.Sdk.v54.Models.All
{
    /// <summary>
    /// EdFiAccountCode
    /// </summary>
    public partial class EdFiAccountCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountCode" /> class.
        /// </summary>
        /// <param name="accountClassificationDescriptor">The type of account code associated with the account.</param>
        /// <param name="accountCodeNumber">An account code defined for the education accounting system by the education organization.</param>
        /// <param name="fiscalYear">The financial accounting year.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="accountCodeDescription">A description of the account code.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the AccountCode entity.</param>
        [JsonConstructor]
        public EdFiAccountCode(string accountClassificationDescriptor, string accountCodeNumber, int fiscalYear, EdFiEducationOrganizationReference educationOrganizationReference, Option<string?> id = default, Option<string?> accountCodeDescription = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            AccountClassificationDescriptor = accountClassificationDescriptor;
            AccountCodeNumber = accountCodeNumber;
            FiscalYear = fiscalYear;
            EducationOrganizationReference = educationOrganizationReference;
            IdOption = id;
            AccountCodeDescriptionOption = accountCodeDescription;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of account code associated with the account.
        /// </summary>
        /// <value>The type of account code associated with the account.</value>
        [JsonPropertyName("accountClassificationDescriptor")]
        public string AccountClassificationDescriptor { get; set; }

        /// <summary>
        /// An account code defined for the education accounting system by the education organization.
        /// </summary>
        /// <value>An account code defined for the education accounting system by the education organization.</value>
        [JsonPropertyName("accountCodeNumber")]
        public string AccountCodeNumber { get; set; }

        /// <summary>
        /// The financial accounting year.
        /// </summary>
        /// <value>The financial accounting year.</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountCodeDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountCodeDescriptionOption { get; private set; }

        /// <summary>
        /// A description of the account code.
        /// </summary>
        /// <value>A description of the account code.</value>
        [JsonPropertyName("accountCodeDescription")]
        public string? AccountCodeDescription { get { return this.AccountCodeDescriptionOption; } set { this.AccountCodeDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AccountCode entity.
        /// </summary>
        /// <value>Extensions to the AccountCode entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAccountCode {\n");
            sb.Append("  AccountClassificationDescriptor: ").Append(AccountClassificationDescriptor).Append("\n");
            sb.Append("  AccountCodeNumber: ").Append(AccountCodeNumber).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountCodeDescription: ").Append(AccountCodeDescription).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountClassificationDescriptor (string) maxLength
            if (this.AccountClassificationDescriptor != null && this.AccountClassificationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AccountClassificationDescriptor, length must be less than 306.", new [] { "AccountClassificationDescriptor" });
            }

            // AccountCodeNumber (string) maxLength
            if (this.AccountCodeNumber != null && this.AccountCodeNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountCodeNumber, length must be less than 50.", new [] { "AccountCodeNumber" });
            }

            // AccountCodeDescription (string) maxLength
            if (this.AccountCodeDescription != null && this.AccountCodeDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for AccountCodeDescription, length must be less than 1024.", new [] { "AccountCodeDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAccountCode" />
    /// </summary>
    public class EdFiAccountCodeJsonConverter : JsonConverter<EdFiAccountCode>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiAccountCode" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAccountCode Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountClassificationDescriptor = default;
            Option<string?> accountCodeNumber = default;
            Option<int?> fiscalYear = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> id = default;
            Option<string?> accountCodeDescription = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountClassificationDescriptor":
                            accountClassificationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accountCodeNumber":
                            accountCodeNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accountCodeDescription":
                            accountCodeDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountClassificationDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountCode.", nameof(accountClassificationDescriptor));

            if (!accountCodeNumber.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountCode.", nameof(accountCodeNumber));

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountCode.", nameof(fiscalYear));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountCode.", nameof(educationOrganizationReference));

            if (accountClassificationDescriptor.IsSet && accountClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(accountClassificationDescriptor), "Property is not nullable for class EdFiAccountCode.");

            if (accountCodeNumber.IsSet && accountCodeNumber.Value == null)
                throw new ArgumentNullException(nameof(accountCodeNumber), "Property is not nullable for class EdFiAccountCode.");

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiAccountCode.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiAccountCode.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAccountCode.");

            if (accountCodeDescription.IsSet && accountCodeDescription.Value == null)
                throw new ArgumentNullException(nameof(accountCodeDescription), "Property is not nullable for class EdFiAccountCode.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAccountCode.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAccountCode.");

            return new EdFiAccountCode(accountClassificationDescriptor.Value!, accountCodeNumber.Value!, fiscalYear.Value!.Value!, educationOrganizationReference.Value!, id, accountCodeDescription, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAccountCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAccountCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAccountCode edFiAccountCode, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAccountCode, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAccountCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAccountCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAccountCode edFiAccountCode, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAccountCode.AccountClassificationDescriptor == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.AccountClassificationDescriptor), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.AccountCodeNumber == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.AccountCodeNumber), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.EducationOrganizationReference), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.IdOption.IsSet && edFiAccountCode.Id == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.Id), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.AccountCodeDescriptionOption.IsSet && edFiAccountCode.AccountCodeDescription == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.AccountCodeDescription), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.EtagOption.IsSet && edFiAccountCode.Etag == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.Etag), "Property is required for class EdFiAccountCode.");

            if (edFiAccountCode.ExtOption.IsSet && edFiAccountCode.Ext == null)
                throw new ArgumentNullException(nameof(edFiAccountCode.Ext), "Property is required for class EdFiAccountCode.");

            writer.WriteString("accountClassificationDescriptor", edFiAccountCode.AccountClassificationDescriptor);

            writer.WriteString("accountCodeNumber", edFiAccountCode.AccountCodeNumber);

            writer.WriteNumber("fiscalYear", edFiAccountCode.FiscalYear);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiAccountCode.EducationOrganizationReference, jsonSerializerOptions);
            if (edFiAccountCode.IdOption.IsSet)
                writer.WriteString("id", edFiAccountCode.Id);

            if (edFiAccountCode.AccountCodeDescriptionOption.IsSet)
                writer.WriteString("accountCodeDescription", edFiAccountCode.AccountCodeDescription);

            if (edFiAccountCode.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAccountCode.Etag);

            if (edFiAccountCode.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAccountCode.Ext, jsonSerializerOptions);
            }
        }
    }
}
