// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v54.Client;

namespace EdFi.OdsApi.Sdk.v54.Models.All
{
    /// <summary>
    /// EdFiStudentAssessment
    /// </summary>
    public partial class EdFiStudentAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessment" /> class.
        /// </summary>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student.</param>
        /// <param name="assessmentReference">assessmentReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</param>
        /// <param name="id">id</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="accommodations">An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:        Braille        Enlarged monitor view        Extra time        Large Print        Setting        Oral Administration        ...</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended.</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered.</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered.</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results.</param>
        /// <param name="items">An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.</param>
        /// <param name="performanceLevels">An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session.</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...</param>
        /// <param name="scoreResults">An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document.</param>
        /// <param name="studentObjectiveAssessments">An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment.</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the StudentAssessment entity.</param>
        [JsonConstructor]
        public EdFiStudentAssessment(string studentAssessmentIdentifier, EdFiAssessmentReference assessmentReference, EdFiStudentReference studentReference, DateTime administrationDate, Option<string?> id = default, Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default, Option<List<EdFiStudentAssessmentAccommodation>?> accommodations = default, Option<DateTime?> administrationEndDate = default, Option<string?> administrationEnvironmentDescriptor = default, Option<string?> administrationLanguageDescriptor = default, Option<string?> eventCircumstanceDescriptor = default, Option<string?> eventDescription = default, Option<List<EdFiStudentAssessmentItem>?> items = default, Option<List<EdFiStudentAssessmentPerformanceLevel>?> performanceLevels = default, Option<string?> platformTypeDescriptor = default, Option<string?> reasonNotTestedDescriptor = default, Option<string?> retestIndicatorDescriptor = default, Option<List<EdFiStudentAssessmentScoreResult>?> scoreResults = default, Option<string?> serialNumber = default, Option<List<EdFiStudentAssessmentStudentObjectiveAssessment>?> studentObjectiveAssessments = default, Option<string?> whenAssessedGradeLevelDescriptor = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            StudentAssessmentIdentifier = studentAssessmentIdentifier;
            AssessmentReference = assessmentReference;
            StudentReference = studentReference;
            AdministrationDate = administrationDate;
            IdOption = id;
            SchoolYearTypeReferenceOption = schoolYearTypeReference;
            AccommodationsOption = accommodations;
            AdministrationEndDateOption = administrationEndDate;
            AdministrationEnvironmentDescriptorOption = administrationEnvironmentDescriptor;
            AdministrationLanguageDescriptorOption = administrationLanguageDescriptor;
            EventCircumstanceDescriptorOption = eventCircumstanceDescriptor;
            EventDescriptionOption = eventDescription;
            ItemsOption = items;
            PerformanceLevelsOption = performanceLevels;
            PlatformTypeDescriptorOption = platformTypeDescriptor;
            ReasonNotTestedDescriptorOption = reasonNotTestedDescriptor;
            RetestIndicatorDescriptorOption = retestIndicatorDescriptor;
            ScoreResultsOption = scoreResults;
            SerialNumberOption = serialNumber;
            StudentObjectiveAssessmentsOption = studentObjectiveAssessments;
            WhenAssessedGradeLevelDescriptorOption = whenAssessedGradeLevelDescriptor;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment administered to a student.</value>
        [JsonPropertyName("studentAssessmentIdentifier")]
        public string StudentAssessmentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [JsonPropertyName("assessmentReference")]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        /// <value>The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</value>
        [JsonPropertyName("administrationDate")]
        public DateTime AdministrationDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolYearTypeReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolYearTypeReference?> SchoolYearTypeReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference? SchoolYearTypeReference { get { return this.SchoolYearTypeReferenceOption; } set { this.SchoolYearTypeReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accommodations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentAccommodation>?> AccommodationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:        Braille        Enlarged monitor view        Extra time        Large Print        Setting        Oral Administration        ...
        /// </summary>
        /// <value>An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:        Braille        Enlarged monitor view        Extra time        Large Print        Setting        Oral Administration        ...</value>
        [JsonPropertyName("accommodations")]
        public List<EdFiStudentAssessmentAccommodation>? Accommodations { get { return this.AccommodationsOption; } set { this.AccommodationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdministrationEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AdministrationEndDateOption { get; private set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        /// <value>The date and time an assessment administration ended.</value>
        [JsonPropertyName("administrationEndDate")]
        public DateTime? AdministrationEndDate { get { return this.AdministrationEndDateOption; } set { this.AdministrationEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdministrationEnvironmentDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdministrationEnvironmentDescriptorOption { get; private set; }

        /// <summary>
        /// The environment in which the test was administered.
        /// </summary>
        /// <value>The environment in which the test was administered.</value>
        [JsonPropertyName("administrationEnvironmentDescriptor")]
        public string? AdministrationEnvironmentDescriptor { get { return this.AdministrationEnvironmentDescriptorOption; } set { this.AdministrationEnvironmentDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdministrationLanguageDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdministrationLanguageDescriptorOption { get; private set; }

        /// <summary>
        /// The language in which an assessment is written and/or administered.
        /// </summary>
        /// <value>The language in which an assessment is written and/or administered.</value>
        [JsonPropertyName("administrationLanguageDescriptor")]
        public string? AdministrationLanguageDescriptor { get { return this.AdministrationLanguageDescriptorOption; } set { this.AdministrationLanguageDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventCircumstanceDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventCircumstanceDescriptorOption { get; private set; }

        /// <summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        /// </summary>
        /// <value>An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.</value>
        [JsonPropertyName("eventCircumstanceDescriptor")]
        public string? EventCircumstanceDescriptor { get { return this.EventCircumstanceDescriptorOption; } set { this.EventCircumstanceDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventDescriptionOption { get; private set; }

        /// <summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        /// </summary>
        /// <value>Describes special events that occur before during or after the assessment session that may impact use of results.</value>
        [JsonPropertyName("eventDescription")]
        public string? EventDescription { get { return this.EventDescriptionOption; } set { this.EventDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentItem>?> ItemsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentItems. The student&#39;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.</value>
        [JsonPropertyName("items")]
        public List<EdFiStudentAssessmentItem>? Items { get { return this.ItemsOption; } set { this.ItemsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerformanceLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentPerformanceLevel>?> PerformanceLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.</value>
        [JsonPropertyName("performanceLevels")]
        public List<EdFiStudentAssessmentPerformanceLevel>? PerformanceLevels { get { return this.PerformanceLevelsOption; } set { this.PerformanceLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlatformTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The platform with which the assessment was delivered to the student during the assessment session.
        /// </summary>
        /// <value>The platform with which the assessment was delivered to the student during the assessment session.</value>
        [JsonPropertyName("platformTypeDescriptor")]
        public string? PlatformTypeDescriptor { get { return this.PlatformTypeDescriptorOption; } set { this.PlatformTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonNotTestedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonNotTestedDescriptorOption { get; private set; }

        /// <summary>
        /// The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...
        /// </summary>
        /// <value>The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...</value>
        [JsonPropertyName("reasonNotTestedDescriptor")]
        public string? ReasonNotTestedDescriptor { get { return this.ReasonNotTestedDescriptorOption; } set { this.ReasonNotTestedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of RetestIndicatorDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RetestIndicatorDescriptorOption { get; private set; }

        /// <summary>
        /// Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...
        /// </summary>
        /// <value>Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...</value>
        [JsonPropertyName("retestIndicatorDescriptor")]
        public string? RetestIndicatorDescriptor { get { return this.RetestIndicatorDescriptorOption; } set { this.RetestIndicatorDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScoreResults
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentScoreResult>?> ScoreResultsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [JsonPropertyName("scoreResults")]
        public List<EdFiStudentAssessmentScoreResult>? ScoreResults { get { return this.ScoreResultsOption; } set { this.ScoreResultsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SerialNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SerialNumberOption { get; private set; }

        /// <summary>
        /// The unique number for the assessment form or answer document.
        /// </summary>
        /// <value>The unique number for the assessment form or answer document.</value>
        [JsonPropertyName("serialNumber")]
        public string? SerialNumber { get { return this.SerialNumberOption; } set { this.SerialNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentObjectiveAssessments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentStudentObjectiveAssessment>?> StudentObjectiveAssessmentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessments. The student&#39;s score and/or performance levels earned for an ObjectiveAssessment.</value>
        [JsonPropertyName("studentObjectiveAssessments")]
        public List<EdFiStudentAssessmentStudentObjectiveAssessment>? StudentObjectiveAssessments { get { return this.StudentObjectiveAssessmentsOption; } set { this.StudentObjectiveAssessmentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WhenAssessedGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WhenAssessedGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The grade level of a student when assessed.
        /// </summary>
        /// <value>The grade level of a student when assessed.</value>
        [JsonPropertyName("whenAssessedGradeLevelDescriptor")]
        public string? WhenAssessedGradeLevelDescriptor { get { return this.WhenAssessedGradeLevelDescriptorOption; } set { this.WhenAssessedGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAssessment entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessment {\n");
            sb.Append("  StudentAssessmentIdentifier: ").Append(StudentAssessmentIdentifier).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  Accommodations: ").Append(Accommodations).Append("\n");
            sb.Append("  AdministrationEndDate: ").Append(AdministrationEndDate).Append("\n");
            sb.Append("  AdministrationEnvironmentDescriptor: ").Append(AdministrationEnvironmentDescriptor).Append("\n");
            sb.Append("  AdministrationLanguageDescriptor: ").Append(AdministrationLanguageDescriptor).Append("\n");
            sb.Append("  EventCircumstanceDescriptor: ").Append(EventCircumstanceDescriptor).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  PlatformTypeDescriptor: ").Append(PlatformTypeDescriptor).Append("\n");
            sb.Append("  ReasonNotTestedDescriptor: ").Append(ReasonNotTestedDescriptor).Append("\n");
            sb.Append("  RetestIndicatorDescriptor: ").Append(RetestIndicatorDescriptor).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  StudentObjectiveAssessments: ").Append(StudentObjectiveAssessments).Append("\n");
            sb.Append("  WhenAssessedGradeLevelDescriptor: ").Append(WhenAssessedGradeLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StudentAssessmentIdentifier (string) maxLength
            if (this.StudentAssessmentIdentifier != null && this.StudentAssessmentIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for StudentAssessmentIdentifier, length must be less than 60.", new [] { "StudentAssessmentIdentifier" });
            }

            // AdministrationEnvironmentDescriptor (string) maxLength
            if (this.AdministrationEnvironmentDescriptor != null && this.AdministrationEnvironmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AdministrationEnvironmentDescriptor, length must be less than 306.", new [] { "AdministrationEnvironmentDescriptor" });
            }

            // AdministrationLanguageDescriptor (string) maxLength
            if (this.AdministrationLanguageDescriptor != null && this.AdministrationLanguageDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AdministrationLanguageDescriptor, length must be less than 306.", new [] { "AdministrationLanguageDescriptor" });
            }

            // EventCircumstanceDescriptor (string) maxLength
            if (this.EventCircumstanceDescriptor != null && this.EventCircumstanceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EventCircumstanceDescriptor, length must be less than 306.", new [] { "EventCircumstanceDescriptor" });
            }

            // EventDescription (string) maxLength
            if (this.EventDescription != null && this.EventDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for EventDescription, length must be less than 1024.", new [] { "EventDescription" });
            }

            // PlatformTypeDescriptor (string) maxLength
            if (this.PlatformTypeDescriptor != null && this.PlatformTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PlatformTypeDescriptor, length must be less than 306.", new [] { "PlatformTypeDescriptor" });
            }

            // ReasonNotTestedDescriptor (string) maxLength
            if (this.ReasonNotTestedDescriptor != null && this.ReasonNotTestedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonNotTestedDescriptor, length must be less than 306.", new [] { "ReasonNotTestedDescriptor" });
            }

            // RetestIndicatorDescriptor (string) maxLength
            if (this.RetestIndicatorDescriptor != null && this.RetestIndicatorDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RetestIndicatorDescriptor, length must be less than 306.", new [] { "RetestIndicatorDescriptor" });
            }

            // SerialNumber (string) maxLength
            if (this.SerialNumber != null && this.SerialNumber.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SerialNumber, length must be less than 60.", new [] { "SerialNumber" });
            }

            // WhenAssessedGradeLevelDescriptor (string) maxLength
            if (this.WhenAssessedGradeLevelDescriptor != null && this.WhenAssessedGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for WhenAssessedGradeLevelDescriptor, length must be less than 306.", new [] { "WhenAssessedGradeLevelDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAssessment" />
    /// </summary>
    public class EdFiStudentAssessmentJsonConverter : JsonConverter<EdFiStudentAssessment>
    {
        /// <summary>
        /// The format to use to serialize AdministrationDate
        /// </summary>
        public static string AdministrationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize AdministrationEndDate
        /// </summary>
        public static string AdministrationEndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studentAssessmentIdentifier = default;
            Option<EdFiAssessmentReference?> assessmentReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<DateTime?> administrationDate = default;
            Option<string?> id = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<List<EdFiStudentAssessmentAccommodation>?> accommodations = default;
            Option<DateTime?> administrationEndDate = default;
            Option<string?> administrationEnvironmentDescriptor = default;
            Option<string?> administrationLanguageDescriptor = default;
            Option<string?> eventCircumstanceDescriptor = default;
            Option<string?> eventDescription = default;
            Option<List<EdFiStudentAssessmentItem>?> items = default;
            Option<List<EdFiStudentAssessmentPerformanceLevel>?> performanceLevels = default;
            Option<string?> platformTypeDescriptor = default;
            Option<string?> reasonNotTestedDescriptor = default;
            Option<string?> retestIndicatorDescriptor = default;
            Option<List<EdFiStudentAssessmentScoreResult>?> scoreResults = default;
            Option<string?> serialNumber = default;
            Option<List<EdFiStudentAssessmentStudentObjectiveAssessment>?> studentObjectiveAssessments = default;
            Option<string?> whenAssessedGradeLevelDescriptor = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studentAssessmentIdentifier":
                            studentAssessmentIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentReference":
                            assessmentReference = new Option<EdFiAssessmentReference?>(JsonSerializer.Deserialize<EdFiAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "administrationDate":
                            administrationDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "accommodations":
                            accommodations = new Option<List<EdFiStudentAssessmentAccommodation>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentAccommodation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "administrationEndDate":
                            administrationEndDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "administrationEnvironmentDescriptor":
                            administrationEnvironmentDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "administrationLanguageDescriptor":
                            administrationLanguageDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventCircumstanceDescriptor":
                            eventCircumstanceDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventDescription":
                            eventDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "items":
                            items = new Option<List<EdFiStudentAssessmentItem>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "performanceLevels":
                            performanceLevels = new Option<List<EdFiStudentAssessmentPerformanceLevel>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentPerformanceLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "platformTypeDescriptor":
                            platformTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reasonNotTestedDescriptor":
                            reasonNotTestedDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "retestIndicatorDescriptor":
                            retestIndicatorDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scoreResults":
                            scoreResults = new Option<List<EdFiStudentAssessmentScoreResult>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentScoreResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "serialNumber":
                            serialNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studentObjectiveAssessments":
                            studentObjectiveAssessments = new Option<List<EdFiStudentAssessmentStudentObjectiveAssessment>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentStudentObjectiveAssessment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "whenAssessedGradeLevelDescriptor":
                            whenAssessedGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!studentAssessmentIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessment.", nameof(studentAssessmentIdentifier));

            if (!assessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessment.", nameof(assessmentReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessment.", nameof(studentReference));

            if (!administrationDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessment.", nameof(administrationDate));

            if (studentAssessmentIdentifier.IsSet && studentAssessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(studentAssessmentIdentifier), "Property is not nullable for class EdFiStudentAssessment.");

            if (assessmentReference.IsSet && assessmentReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentReference), "Property is not nullable for class EdFiStudentAssessment.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentAssessment.");

            if (administrationDate.IsSet && administrationDate.Value == null)
                throw new ArgumentNullException(nameof(administrationDate), "Property is not nullable for class EdFiStudentAssessment.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentAssessment.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiStudentAssessment.");

            if (accommodations.IsSet && accommodations.Value == null)
                throw new ArgumentNullException(nameof(accommodations), "Property is not nullable for class EdFiStudentAssessment.");

            if (administrationEndDate.IsSet && administrationEndDate.Value == null)
                throw new ArgumentNullException(nameof(administrationEndDate), "Property is not nullable for class EdFiStudentAssessment.");

            if (administrationEnvironmentDescriptor.IsSet && administrationEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrationEnvironmentDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (administrationLanguageDescriptor.IsSet && administrationLanguageDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrationLanguageDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (eventCircumstanceDescriptor.IsSet && eventCircumstanceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eventCircumstanceDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (eventDescription.IsSet && eventDescription.Value == null)
                throw new ArgumentNullException(nameof(eventDescription), "Property is not nullable for class EdFiStudentAssessment.");

            if (items.IsSet && items.Value == null)
                throw new ArgumentNullException(nameof(items), "Property is not nullable for class EdFiStudentAssessment.");

            if (performanceLevels.IsSet && performanceLevels.Value == null)
                throw new ArgumentNullException(nameof(performanceLevels), "Property is not nullable for class EdFiStudentAssessment.");

            if (platformTypeDescriptor.IsSet && platformTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(platformTypeDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (reasonNotTestedDescriptor.IsSet && reasonNotTestedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(reasonNotTestedDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (retestIndicatorDescriptor.IsSet && retestIndicatorDescriptor.Value == null)
                throw new ArgumentNullException(nameof(retestIndicatorDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (scoreResults.IsSet && scoreResults.Value == null)
                throw new ArgumentNullException(nameof(scoreResults), "Property is not nullable for class EdFiStudentAssessment.");

            if (serialNumber.IsSet && serialNumber.Value == null)
                throw new ArgumentNullException(nameof(serialNumber), "Property is not nullable for class EdFiStudentAssessment.");

            if (studentObjectiveAssessments.IsSet && studentObjectiveAssessments.Value == null)
                throw new ArgumentNullException(nameof(studentObjectiveAssessments), "Property is not nullable for class EdFiStudentAssessment.");

            if (whenAssessedGradeLevelDescriptor.IsSet && whenAssessedGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(whenAssessedGradeLevelDescriptor), "Property is not nullable for class EdFiStudentAssessment.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAssessment.");

            return new EdFiStudentAssessment(studentAssessmentIdentifier.Value!, assessmentReference.Value!, studentReference.Value!, administrationDate.Value!.Value!, id, schoolYearTypeReference, accommodations, administrationEndDate, administrationEnvironmentDescriptor, administrationLanguageDescriptor, eventCircumstanceDescriptor, eventDescription, items, performanceLevels, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, scoreResults, serialNumber, studentObjectiveAssessments, whenAssessedGradeLevelDescriptor, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAssessment edFiStudentAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAssessment edFiStudentAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAssessment.StudentAssessmentIdentifier == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.StudentAssessmentIdentifier), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.AssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.AssessmentReference), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.StudentReference), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.IdOption.IsSet && edFiStudentAssessment.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.Id), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.SchoolYearTypeReferenceOption.IsSet && edFiStudentAssessment.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.SchoolYearTypeReference), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.AccommodationsOption.IsSet && edFiStudentAssessment.Accommodations == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.Accommodations), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.AdministrationEnvironmentDescriptorOption.IsSet && edFiStudentAssessment.AdministrationEnvironmentDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.AdministrationEnvironmentDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.AdministrationLanguageDescriptorOption.IsSet && edFiStudentAssessment.AdministrationLanguageDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.AdministrationLanguageDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.EventCircumstanceDescriptorOption.IsSet && edFiStudentAssessment.EventCircumstanceDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.EventCircumstanceDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.EventDescriptionOption.IsSet && edFiStudentAssessment.EventDescription == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.EventDescription), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.ItemsOption.IsSet && edFiStudentAssessment.Items == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.Items), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.PerformanceLevelsOption.IsSet && edFiStudentAssessment.PerformanceLevels == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.PerformanceLevels), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.PlatformTypeDescriptorOption.IsSet && edFiStudentAssessment.PlatformTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.PlatformTypeDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.ReasonNotTestedDescriptorOption.IsSet && edFiStudentAssessment.ReasonNotTestedDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.ReasonNotTestedDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.RetestIndicatorDescriptorOption.IsSet && edFiStudentAssessment.RetestIndicatorDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.RetestIndicatorDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.ScoreResultsOption.IsSet && edFiStudentAssessment.ScoreResults == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.ScoreResults), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.SerialNumberOption.IsSet && edFiStudentAssessment.SerialNumber == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.SerialNumber), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.StudentObjectiveAssessmentsOption.IsSet && edFiStudentAssessment.StudentObjectiveAssessments == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.StudentObjectiveAssessments), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.WhenAssessedGradeLevelDescriptorOption.IsSet && edFiStudentAssessment.WhenAssessedGradeLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.WhenAssessedGradeLevelDescriptor), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.EtagOption.IsSet && edFiStudentAssessment.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.Etag), "Property is required for class EdFiStudentAssessment.");

            if (edFiStudentAssessment.ExtOption.IsSet && edFiStudentAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessment.Ext), "Property is required for class EdFiStudentAssessment.");

            writer.WriteString("studentAssessmentIdentifier", edFiStudentAssessment.StudentAssessmentIdentifier);

            writer.WritePropertyName("assessmentReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessment.AssessmentReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessment.StudentReference, jsonSerializerOptions);
            writer.WriteString("administrationDate", edFiStudentAssessment.AdministrationDate.ToString(AdministrationDateFormat));

            if (edFiStudentAssessment.IdOption.IsSet)
                writer.WriteString("id", edFiStudentAssessment.Id);

            if (edFiStudentAssessment.SchoolYearTypeReferenceOption.IsSet)
            {
                writer.WritePropertyName("schoolYearTypeReference");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.SchoolYearTypeReference, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.AccommodationsOption.IsSet)
            {
                writer.WritePropertyName("accommodations");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.Accommodations, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.AdministrationEndDateOption.IsSet)
                writer.WriteString("administrationEndDate", edFiStudentAssessment.AdministrationEndDateOption.Value!.Value.ToString(AdministrationEndDateFormat));

            if (edFiStudentAssessment.AdministrationEnvironmentDescriptorOption.IsSet)
                writer.WriteString("administrationEnvironmentDescriptor", edFiStudentAssessment.AdministrationEnvironmentDescriptor);

            if (edFiStudentAssessment.AdministrationLanguageDescriptorOption.IsSet)
                writer.WriteString("administrationLanguageDescriptor", edFiStudentAssessment.AdministrationLanguageDescriptor);

            if (edFiStudentAssessment.EventCircumstanceDescriptorOption.IsSet)
                writer.WriteString("eventCircumstanceDescriptor", edFiStudentAssessment.EventCircumstanceDescriptor);

            if (edFiStudentAssessment.EventDescriptionOption.IsSet)
                writer.WriteString("eventDescription", edFiStudentAssessment.EventDescription);

            if (edFiStudentAssessment.ItemsOption.IsSet)
            {
                writer.WritePropertyName("items");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.Items, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.PerformanceLevelsOption.IsSet)
            {
                writer.WritePropertyName("performanceLevels");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.PerformanceLevels, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.PlatformTypeDescriptorOption.IsSet)
                writer.WriteString("platformTypeDescriptor", edFiStudentAssessment.PlatformTypeDescriptor);

            if (edFiStudentAssessment.ReasonNotTestedDescriptorOption.IsSet)
                writer.WriteString("reasonNotTestedDescriptor", edFiStudentAssessment.ReasonNotTestedDescriptor);

            if (edFiStudentAssessment.RetestIndicatorDescriptorOption.IsSet)
                writer.WriteString("retestIndicatorDescriptor", edFiStudentAssessment.RetestIndicatorDescriptor);

            if (edFiStudentAssessment.ScoreResultsOption.IsSet)
            {
                writer.WritePropertyName("scoreResults");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.ScoreResults, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.SerialNumberOption.IsSet)
                writer.WriteString("serialNumber", edFiStudentAssessment.SerialNumber);

            if (edFiStudentAssessment.StudentObjectiveAssessmentsOption.IsSet)
            {
                writer.WritePropertyName("studentObjectiveAssessments");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.StudentObjectiveAssessments, jsonSerializerOptions);
            }
            if (edFiStudentAssessment.WhenAssessedGradeLevelDescriptorOption.IsSet)
                writer.WriteString("whenAssessedGradeLevelDescriptor", edFiStudentAssessment.WhenAssessedGradeLevelDescriptor);

            if (edFiStudentAssessment.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentAssessment.Etag);

            if (edFiStudentAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
